
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  color       String   @default("#808080")
  isInbox     Boolean  @default(false)
  isArchived  Boolean  @default(false)
  sortOrder   Int      @default(0)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos       Todo[]

  @@index([userId, sortOrder])
}

model Todo {
  id            String      @id @default(uuid())
  description   String
  completed     Boolean     @default(false)
  dueDate       DateTime    @default(now())  // ✅ Made optional - not all todos have due dates
  sortOrder     Int         @default(0) // ✅ Added missing field
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  priority      Int         @default(1)
  completedAt   DateTime?
  projectId     String
  userId        String
  subTodos      SubTodo[]
  labels        TodoLabel[] // ✅ Added missing relation for labels
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, completed, sortOrder])
  @@index([userId, dueDate])
}

model SubTodo {
  id          String    @id @default(uuid())
  description String
  completed   Boolean   @default(false)
  sortOrder   Int       @default(0) // ✅ Added for ordering subtodos
  completedAt DateTime? // ✅ Added for tracking completion time
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  todoId      String
  todo        Todo      @relation(fields: [todoId], references: [id], onDelete: Cascade) // ✅ Added cascade

  @@index([todoId, sortOrder]) // ✅ Added index for performance
}

model Label {
  id          String      @id @default(uuid())
  name        String
  color       String      @default("#808080")
  userId      String
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos       TodoLabel[]

  @@unique([userId, name])
}

model TodoLabel {
  todoId    String
  labelId   String
  createdAt DateTime @default(now())
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  
  @@id([todoId, labelId])
}

model AIUsage {
  id          String   @id @default(cuid())
  userId      String
  model       String
  category    String
  tokens      Int
  cost        Float
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String
  password          String
  aiGenerations     Int       @default(0)
  subscriptionTier  String    @default("free")
  resetDate         DateTime  @default(now())
  todos             Todo[]
  aiUsages          AIUsage[]
  projects          Project[]
  labels            Label[]
}